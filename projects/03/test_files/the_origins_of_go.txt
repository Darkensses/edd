The origins of Go

Like biological species, successful languages beget offspring that incorporate
the advantages of their ancestors; interbreeding sometimes leads to surprising
strengths; and, very occasionally, a radical new feature arises without
precedent. We can learn a lot about why a language is the way it is and what
environment it has been adapted for by looking at these influences. The figure
below shows the most important influences of earlier programming languages on
the design of Go.

Go is sometimes described as a “C-like language,” or as “C for the 21st century.”
From C, Go inherited its expression syntax, control-flow statements, basic data
types, call-by-value parameter passing, pointers, and above all, C’s emphasis
on programs that compile to efficient machine code and cooperate naturally with
the abstractions of current operating systems.


But there are other ancestors in Go’s family tree. One major stream of influence
comes from languages by Niklaus Wirth, beginning with Pascal. Modula-2 inspired
the package concept. Oberon eliminated the distinction between module interface
files and module implementation files. Oberon-2 influenced the syntax for
packages, imports, and declarations, and Object Oberon provided the syntax for
method declarations. Another lineage among Go’s ancestors, and one that makes
Go distinctive among recent programming languages, is a sequence of little-known
research languages developed at Bell Labs, all inspired by the concept of
communicating sequential processes (CSP) from Tony Hoare’s seminal 1978 paper
on the foundations of concurrency. In CSP, a program is a parallel composition
of processes that have no shared state; the processes communicate and
synchronize using channels. But Hoare’s CSP was a formal language for describing
the fundamental concepts of concurrency, not a programming language for writing
executable programs. Rob Pike and others began to experiment with CSP
implementations as actual languages. The first was called Squeak (“A language
for communicating with mice”), which provided a language for handling mouse and
keyboard events, with statically created channels. This was followed by
Newsqueak, which offered C-like statement and expression syntax and Pascal-like
type notation. It was a purely functional language with garbage collection,
again aimed at managing keyboard, mouse, and window events. Channels became
first-class values, dynamically created and storable in variables. The Plan 9
operating system carried these ideas forward in a language called Alef. Alef
tried to make Newsqueak a viable system programming language, but its omission
of garbage collection made concurrency too painful. Other constructions in Go
show the influence of non-ancestral genes here and there; for example iota is
loosely from APL, and lexical scope with nested functions is from Scheme (and
most languages since). Here too we find novel mutations. Go’s innovative slices
provide dynamic arrays with efficient random access but also permit
sophisticated sharing arrangements reminiscent of linked lists. And the defer
statement is new with Go.
